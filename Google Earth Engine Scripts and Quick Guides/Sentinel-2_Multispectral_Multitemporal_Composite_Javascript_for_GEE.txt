// This script combines Sentinel-1 SAR data into a multitemporal 4 band composite, with VV and VH polarization in both ascending and descending mode.  
//Follow instructions in the script before running it. 

// ////////////////////// IMPORT & COMPOSITE SENTINEL 2 COLLECTION ////////////////////////

//Delete any existing geomtry Import record. Uncomment the line below and define coordinates for geometry, or alternateively define the geometry on the map. 
//var geometry = ee.Geometry.BBox(63.69035, 39.7248, 64.1329, 40.046707) 

// Function to mask clouds using the Sentinel-2 QA band.
function maskS2clouds(image) {
  var qa = image.select('QA60');

  // Bits 10 and 11 are clouds and cirrus, respectively.
  var cloudBitMask = 1 << 10;
  var cirrusBitMask = 1 << 11;

  // Both flags should be set to zero, indicating clear conditions.
  var mask = qa.bitwiseAnd(cloudBitMask).eq(0).and(
             qa.bitwiseAnd(cirrusBitMask).eq(0));

  // Return the masked and scaled data, without the QA bands.
  return image.updateMask(mask).divide(10000)
      .select("B.*")
      .copyProperties(image, ["system:time_start"]);
}

// Map the function over a time period of data and take the median.
// Load Sentinel-2 TOA reflectance data.
var S2_col = ee.ImageCollection('COPERNICUS/S2')
    .filterBounds(geometry)
    .filterDate('2019-07-01', '2019-07-30')
    // Pre-filter to get less cloudy granules.
    .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 20))
    .map(maskS2clouds);

// Print total Sentinel 2 images employed
print('Sentinel 2 images', S2_col);

// Select the bands of interest form the Image Collection
var s2comp = S2_col.select(['B2','B3','B4','B5','B6','B7','B8','B8A','B11','B12'])
  .mean().clip(geometry);


// ////////////////////// COMPOSITE SENTINEL 1 & 2 MEAN BANDS ////////////////////////

var fullComposite = ee.Image([s2comp]);

// Reduction in the number of decimal places of the values of the resulting raster
// This will not reduce noticeably the quality of the data but it will reduce significantly
// the size of the resulting raster.
var Composite = ee.Image(0).expression(
    'round(img * 10000) / 10000', {
      'img': fullComposite
    });
    
//print('Composite:', Composite);

//Give the exported raster a name (description below). See the Docs tab for info on exporting to Google Drive or GEE Assets. 
Export.image.toCloudStorage({ 
  image: fullComposite,
  description: 'Sent-2_Kandahar_Jul_2019',
  scale: 10,
  maxPixels: 1e12,
  region: geometry
});

print('Done')
